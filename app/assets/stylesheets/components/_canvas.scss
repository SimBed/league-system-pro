// 1.variables
// 2.divtables 
// 3.form
// 4.flash
// 5.misc
// 6.canvas
// 7. images
// variables

$white: #ffffff;
$gray-50: #f8f9fa;
$gray-100: #eeeeee;
$gray-200: #dddddd;
$gray-300: #bbbbbb;
$gray-400: #ced4da;
$gray-500: #adb5bd;
$gray-600: #999999;
$gray-700: #777777;
$gray-800: #555555;
$gray-900: #222222;
$black: #000000;

$grays: (
  "100": $gray-100,
  "200": $gray-200,
  "300": $gray-300,
  "400": $gray-400,
  "500": $gray-500,
  "600": $gray-600,
  "700": $gray-700,
  "800": $gray-800,
  "900": $gray-900,
) !default;

$blue: #4726e1;
$indigo: #6610f2 !default;
$purple: #300d81;
$pink: #d63384 !default;
$red: #d34f2d;
$orange: #f08d34;
$yellow: #f7cc76;
$green: #1d4b40;
$teal: #20c997 !default;
$cyan: #0dcaf0 !default;

$colors: (
  "blue": $blue,
  "indigo": $indigo,
  "purple": $purple,
  "pink": $pink,
  "red": $red,
  "orange": $orange,
  "yellow": $yellow,
  "green": $green,
  "teal": $teal,
  "cyan": $cyan,
  "white": $white,
  "gray": $gray-600,
  "gray-dark": $gray-800,
  "black": $black,
  "border-color": $gray-200,
) !default;

$primary: $blue;
$secondary: $gray-800;
$success: $green !default;
$info: $cyan !default;
$warning: $yellow !default;
$danger: $red !default;
$light: $gray-100 !default;
$dark: $gray-900 !default;

$theme-colors: (
  "primary": $primary,
  "secondary": $secondary,
  "success": $success,
  "info": $info,
  "warning": $warning,
  "danger": $danger,
  "light": $light,
  "dark": $dark,
) !default;

$font-stack: "Quicksand", "Arial";
$font-size-base: 1rem !default;

// copied from node_modules _variables
// Grid breakpoints
//
// Define the minimum dimensions at which your layout will change,
// adapting to different screen sizes, for use in media queries.

// scss-docs-start grid-breakpoints
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
) !default;

// copied from node_modules mixins/_breakpoints
// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @if not $n {
    @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
  }
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width.
// The maximum value is reduced by 0.02px to work around the limitations of
// `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $max: map-get($breakpoints, $name);
  @return if($max and $max > 0, $max - .02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min:  breakpoint-min($name, $breakpoints);
  $next: breakpoint-next($name, $breakpoints);
  $max:  breakpoint-max($next, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($next, $breakpoints) {
      @content;
    }
  }
}




body {
  margin: 0;
  font-size: 0.9em;
  background-color: #e9ecef;
  font-family: 'Oxygen', sans-serif;
}

td.ago {
  font-size: 0.4rem;
}

.player-summary {
  background-color: green;
  max-width: 300px;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 4px 8px;  
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  padding: 0 5px;
}

.player-summary div {
  font-size: 18px;
  font-weight: bolder;
  color: white;
}

@media screen and (min-width: 600px) {
	body {
    font-size: 1.3rem;
	}
  h5 {
    font-size: 1.75rem;
  }
  td.ago {
    font-size: 0.8rem;
  }
 }

//  img.style-icon {
//   /*display: block;*/
//   width: 1.8rem;
//   height: 1.8rem;
// }

pre {
  background-color: #eee;
  padding: 10px;
  font-size: 11px; }

th {
  padding-bottom: 5px; }

td {
  padding: 0 5px 7px; }

div.field,
div.actions {
  margin-bottom: 10px; }

#notice {
  color: green; }

.field_with_errors {
  padding: 2px;
  background-color: red;
  display: table; }

#error_explanation {
  width: 450px;
  border: 2px solid red;
  padding: 7px 7px 0;
  margin-bottom: 20px;
  background-color: #f0f0f0; }

#error_explanation h2 {
  text-align: left;
  font-weight: bold;
  padding: 5px 5px 5px 15px;
  font-size: 12px;
  margin: -7px -7px 0;
  background-color: #c00;
  color: #fff; }

#error_explanation ul li {
  font-size: 12px;
  list-style: square; }

label {
  display: block; }

img.edit-icon {
  display: block;
  width: 1.0rem;
  height: 1.0rem;
  margin: auto;
}

img.edit-icon:hover {
  opacity: 1;
  transform: scale(1.3); }

th {
  padding: 0 5px 5px;
}

th .current{
  padding-right: 12px;
  background-repeat: no-repeat;
  background-position: right center;
  // color: $gray-darker
 }

th .notcurrent{
// border-bottom: 1px dashed $gray-darker;
 }

th .asc {
/*background-image: url(/images/up_arrow.gif);*/
background-image: image-url('up_arrow.gif');
}

th .desc {
/*background-image: url(/images/down_arrow.gif);*/
background-image: image-url('down_arrow.gif');
}

// to get rid of border that apears when replacing link_to with button_to, needed because link_to doesn't allow a delete request to be processed as delete :/ 
button {
  border: none;
}

i.hide-chart {
  opacity: 0.3;
}

.navbar-brand {
  text-transform: uppercase;
  letter-spacing: 0.15rem;
  font-size: 1.2rem;
  color: rgba(255,255,255,0.8);
  font-family: Arial, Helvetica, sans-serif;
}

@media (min-width: 900px) {
  .navbar-brand {
    font-size: 1.5rem;
    letter-spacing: 0.2rem;    
  }
}

button {
  padding: 0;
  :hover {
    opacity: 0.7;
  }
}

.navbar-sticky {
  transform: translateY(0);
  transition: all .4s ease-in-out;
  position: fixed;
  top: 0;
  right: 0;
  bottom: auto;
  left: 0;
  opacity: 1;
  z-index: 1040
}

.navbar-headroom {
  margin-top: 7rem;
}

nav.disappear {
  transform: translateY(-100%);
}

.match-league-data {
  font-size: 0.7rem;
}

@media screen and (min-width: 600px) {
  .match-league-data {
    font-size: 1.0rem;
  }
 }



//  divtables 
 
 div.admin-table {
  display: flex;
  flex-direction: column;
  border: 1px solid #ccc;
  margin: 0 auto;
  color: $black;
  box-shadow: 1px 3px 6px #000000;
  border-radius: 0.375rem;    
  &.overflow {
    overflow-x: auto;
  }
  .row  {
    background-color: #e9e9e9;
    margin: 0;
    &.extra-small .column {
      font-size: 0.5rem;
      padding: 5px;        
      @include media-breakpoint-up(md) {
        font-size: 0.8rem;  
        }
    } 
    &.with-gradient {
      background-color: $white;
      background: linear-gradient($gray-700, $gray-200);
      box-shadow: none;
    }            
  }
  &.striped {
    .row:nth-child(even) {
      background-color: $gray-200;       
    }
  }
  &.narrow {
    @include media-breakpoint-up(md) {
      width: 50%;
      margin-left: 0;
      }  
  }
  &.reduce-size {
    @include media-breakpoint-down(md) {
      font-size: 85%;
      }      
  }

  .column {
    flex: 0.25;
    overflow: hidden;      
    padding: 5px;
    border-right: 1px solid #ccc;
    transition: background-color 0.3s ease;
    @include media-breakpoint-up(md) {
      padding: 10px;          
      }      
    &.extra-small{
      font-size: 0.7rem;
      padding: 5px;
      @include media-breakpoint-up(md) {
        font-size: 1.0rem;
        padding: 10px;          
        }
    }
    &:last-child {
      border-right: none;
    }
    &:hover {
      background-color: #ddd;
    }
  }
  .col-05x {
    flex: 0.5;
    overflow: auto;
  }
  .col-1x {
    flex: 1;
    overflow: auto;
  }
  .col-2x {
    flex: 2;
    overflow: auto;
  }
  .col-3x {
    flex: 3;
    overflow: auto;
  }
  // accommodate extra width of student icon when needed    
  .col-2x-sm {
    flex: 2;
    overflow: auto;
    @include media-breakpoint-up(sm) {
      flex: 1;
    }  
  }

  .adj-line-height {
    line-height: 1.5rem;
  }
}

// form 
%select {
  color: $gray-700;
  border: solid;
  border-color: $gray-50;
  border-width: 1px;
  background-color: $gray-50;
}

select.sort {
  @extend %select;
  padding: 0.1rem 0.5rem;  
  // min-height: calc(1.5em + 0.5rem + 2px);    
}

select.booking {
  @extend %select;
}

.form-control-sm {
  min-height: calc(1.5em + 0.5rem + 2px);
  padding: 0.25rem 0.5rem;
  font-size: .875rem;
  border-radius: 0.2rem;
}

form fieldset {
  color: $gray-800;
  font-family: $font-stack;
  font-size: 0.9em;
  font-weight: normal;
  label {
    margin-right: 0.5rem;
    margin-bottom: 0.4rem;
    line-height: 0.7rem;
  }
}

legend {
  width:auto;
  font-size: 0.9rem;
  font-weight: normal;
  padding-right: 0.75rem;
}

.chbox-lbl-filters {
  font-size: 0.8rem;
}

label {
  display: block;
  line-height: 1.1rem;
  }

/*couldn't get to the bottom of why this is needed but checkbox and checkbox label misaligned without */
input[type="checkbox"] {
  vertical-align: middle
}

.searchdelete {
  margin-left:auto;
}

div.field, div.actions {
  margin-bottom: 0.4rem;
  .confirmation {
  font-size: 80%;
  padding-left :1rem;
  margin-bottom :0;
}
input.disabled {
  pointer-events: none;
  opacity: 30%;
  }
  &.reduce input {
    font-size: 80%;
    text-transform: lowercase;
    padding: 0.25rem;
  }  
}

div.actions input {
  background-color: $gray-800;
  border-color: none;
  color: $white;
  border-radius: 0.5rem;
  padding: 0.5rem;
  box-shadow: 0.1rem 0.1rem 0.3rem $gray-800;
  text-transform: none;
  font-size: 0.8em;
  &:hover {
    opacity: 0.8;
    box-shadow: none;    
  }
}

div.image_actions input {
  vertical-align:middle;
  border-radius: 0.5rem;
  box-shadow: 0.3rem 0.3rem 0.6rem $gray-800;
  font-size: 0.8em;
  transform: scale(0.8);
  &:hover {
    opacity: 0.8;
    box-shadow: none;    
  }
}

form {
  &.admin_form {
    position: relative; //for benefit of cancel button
    background-color: $gray-100;
    padding: 0.5rem;
    box-shadow: 1px 3px 6px $black;
    border-radius: 0.375rem;
    .cancel {
      position: absolute;
      top: 1rem;
      right: 1rem;
    }
  }
  .form-mandatory::after {
    content: "  *";
    font-size: 0.7rem;
  }

  span.sub-label {
    font-size: 0.7rem;
  }

  &.signup .form-control {
    padding-top:0;
    padding-bottom:0;
  }

  &.entries select {
    max-width: 95%;
  } 
}

h2 form {
  display: inline-block;
  font-size: 0.5em;
  select.sort {
    color: $gray-700;
    border: solid;
    border-color: $gray-50;
    border-width: 1px;
    background-color: $gray-50;  
  }
}

// flash
.flash {
  position:fixed;
  top: 8rem;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  flex-direction: column;
  align-items: center;
  max-width: 100%;
  width: max-content;
  z-index: 1;

  &__message {
    animation: appear-then-fade 8s both;
    border-radius: 999px;
    border-width: 0;
    padding: 1rem;
  }
}

@keyframes appear-then-fade {
  0%, 100% {
    opacity:0
  }
  5%, 60% {
    opacity:1
  }
}

// links
a {
  color: black;
  text-decoration: none;
 }

// a:hover {
// color: black;
// opacity: 0.7; }

//
a.buttonlike {
  border-radius: 0.5rem;
  padding: 0.1rem 0.5rem;
  box-shadow: 0.1rem 0.1rem 0.3rem $gray-300;
  text-decoration: none;
  color: $black;
  background-color: $gray-400;
  &.text-priority {
    color: $gray-800;
    font-weight: 700;
  }
  &::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
    width: 100%;
    height: 1px;
    background-color: black;
    transform: scaleX(0);
    transform-origin: bottom left;
    transition: transform 0.2s ease-in-out;
  }
  &:hover::after,
  &:focus::after,
  &:active::after {
    transform: scaleX(1);
  }  
  &:hover {
    box-shadow: none;
  }
  @include media-breakpoint-up(md) {
  }
}

// canvas
.canvas {
  position: relative;
  padding-top: 0.25rem;
  padding-bottom: 0.25rem;
  padding-right: 0.25rem;
  padding-left: 0.25rem;
  &.gray100-canvas {
    background-color: $gray-100;
  }
  &.embossed {
    box-shadow: 1px 3px 6px $black;
    border-radius: 0.375rem;
  }
  .cancel {
    position: absolute;
    top: 0.5rem;
    right: 0.75rem;
  }
}

// images
img.table_icon:hover {
  transform: scale(1.2);
  opacity: 0.5
  }

a img.table_icon {
  width: 1.0rem;
  height: 1.0rem;
  opacity: 1.0;
  @include media-breakpoint-up(lg) {
    width: 1.3rem;
    height: 1.3rem;
  }
  &.scale_up {
    transform: scale(1.5);
  }
  &.dull {
    opacity: 0.1;
  }  
}

// misc
.hidden {
  display: none;
}


.canvas {
  position: relative;
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
  padding-right: 0.25rem;
  padding-left: 0.25rem;
  &.gray100-canvas {
    background-color: $gray-100;
  }
  &.embossed {
    box-shadow: 1px 3px 6px $black;
    border-radius: 0.375rem;
  }
  .cancel {
    position: absolute;
    top: 1rem;
    right: 1rem;
  }
}